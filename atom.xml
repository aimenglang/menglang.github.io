<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>爱上感觉</title>
  
  <subtitle>青春有你</subtitle>
  <link href="https://langman.us.kg/atom.xml" rel="self"/>
  
  <link href="https://langman.us.kg/"/>
  <updated>2024-10-10T14:22:37.170Z</updated>
  <id>https://langman.us.kg/</id>
  
  <author>
    <name>青春有你</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ESXi与VMware的区别是什么？</title>
    <link href="https://langman.us.kg/html/esxi-vm/"/>
    <id>https://langman.us.kg/html/esxi-vm/</id>
    <published>2024-10-09T06:48:11.000Z</published>
    <updated>2024-10-10T14:22:37.170Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ESXi是什么？">ESXi是什么？</h1><p>ESXi是一个独立而轻量级的虚拟化平台，是VMware公司的一款企业级服务器虚拟化产品，它属于Type-1或本地虚拟机监视器（hypervisor），可以在硬件上运行虚拟机，直接与物理硬件进行交互，而无需通过操作系统，因此能够更加效率且充分地利用企业硬件资源（比如CPU、内存、存储和网络等），这样一来，性能损耗降低，虚拟化的效率得到提升。</p><p>ESXi还拥有强大的虚拟化管理工具和功能，帮助用户更加轻松地管理服务器上的大量虚拟机，从而提供一个更加可靠、更加稳定、更加安全的虚拟化环境。</p><h1 id="VMware是什么？">VMware是什么？</h1><p>VMware是一家公司，或者也可以将其看做一个完整的虚拟化解决方案，它提供了多个虚拟化产品，其中包括了VMware ESXi虚拟化操作系统、VMware Workstation、VMware vSphere™虚拟化平台、各种管理和监控工具等，这点在ESXi和VMware区别之中比较明显。由此可见，VMware的产品和服务范围更广泛，可以为企业客户提供更全面的虚拟化解决方案。</p><p>ESXi与VMware的区别是什么？<br>那么大家现在有没有看出ESXi与VMware的区别了呢？其实就像是一个产品与其生产公司之间的关系一样。我们用一句简单的话来概括一下：ESXi是VMware的一种虚拟化操作系统，而VMware是一家提供虚拟化解决方案的软件公司。因此，ESXi是VMware公司开发的一款专门用于虚拟化的操作系统。</p><p>为了帮助大家更加清晰地从各个细节方面充分地了解ESXi和VMware区别所在，我们在下面向大家列出了一个小表格，大家可以简单地看一看：</p><pre><code>              ESXi                                                        VMware</code></pre><p>概念本质ESXi是由VMware公司开发的一款虚拟化操作系统。VMware是一个提供完整虚拟化解决方案的公司。<br>产品焦点ESXi专注于服务器虚拟化领域，并广泛应用于构建和管理企业级虚拟化环境。VMware还有其他产品（如vSphere和Workstation），用于虚拟化不同的任务和工作环境。<br>核心组件ESXi是VMware虚拟化平台的核心组件之一，提供了一系列功能，包括虚拟机管理、存储和网络虚拟化、负载均衡以及灾难恢复等。VMware则是一个完整的虚拟化解决方案，包含了ESXi以及其他可以构建、部署和管理虚拟化基础设施的组件。<br>付费情况ESXi可以免费使用，也可通过购买许可证解锁更多高级功能和技术支持。VMware的完整解决方案需要根据具体需求购买相应的许可证。</p><p>由此可见，ESXi是VMware公司开发的一款精简、高性能的虚拟化操作系统，主要用于构建和管理企业级服务器虚拟化环境。而VMware则是一家提供全面虚拟化解决方案的公司，拥有多个产品套件和定制选项。无论您是需要服务器虚拟化还是全面的虚拟化解决方案，VMware都可以根据您的需求提供相应的产品。</p><p>注意：有些小伙伴可能还会问到ESXi和VMware哪个性能好这样的问题，大家看到这里心里应该已经知道了答案，这两者虽然有所关联，但是它们在阶级概念上是不同层级的，我们并不能直接地对这两者进行性能对比。</p><p>如何保护VMware ESXi虚拟机安全？<br>经过上文的分别介绍以及具体的分类对比，大家应该已经对ESXi与VMware的区别有了一个比较清晰地认知。那么虚拟化作为目前企业发展的重要驱动力和战略工具，能够为企业带来更多的优势与机会，因此，为了保护企业虚拟环境中的大量虚拟机的安全，我们该怎么做呢？</p><p>虚拟机备份就是一个不错的解决方案，这对于虚拟机来说也是一样的，有了备份的存在，就算遇到一些难以解决的意外状况，我们也可以通过备份来快速恢复，从而保护虚拟环境安全，降低系统中断时间，确保企业业务连续。</p><p>对于虚拟机备份来说，一般ESXi或者vSphere是没有内置的有直接相关的备份还原功能，但是我们可以通过一些其他的方式来达成和备份相似的目的，比如：导出OVF模板、复制虚拟机文件、克隆虚拟机、拍摄快照等。</p><p>对于上述的方法，如果您真的实际使用过，那么应该就会明白它们存在的一些局限性，比如只能一台一台地操作，这点很重要，尤其是对于那些拥有大量虚拟机的企业来说，这样逐一操作的方式会很浪费时间精力。那么您想要批量化集中化地对企业虚拟环境中的大量虚拟机的备份还原任务进行管理吗？那就试试傲梅企业备份旗舰版吧！</p><p>自动备份：根据每日&#x2F;每周&#x2F;每月计划自动备份，以自动运行备份任务，无需人工干预。<br>集中备份：在中央控制台中批量备份虚拟机，而无需在每个虚拟机上安装代理。<br>兼容性强：支持Windows PC与Server操作系统，支持备份Hyper-V或VMware虚拟机。<br>轻松还原：快速轻松地从任何选定的历史记录版本还原整个虚拟机。<br>如果您觉得还可以的话可以下载安装傲梅企业备份旗舰版，然后跟着我们的演示教程一起看看怎么轻松备份虚拟机吧！</p><p>不过在开始备份之前，我们得先绑定设备。请您打开傲梅企业备份旗舰版，登录您的账号，在主界面中将您的vCenter或ESXi主机添加为源设备（此步骤仅在初次绑定主机时才需要，绑定成功之后则无需重复此步骤）。</p><p>步骤1. 绑定设备之后，我们就可以通过中央控制台对主机管理的大量虚拟机批量创建备份任务：请您点击“备份任务”&gt;“新建任务”。</p><p>步骤2. 根据您的需求设置备份类型、任务名、设备、备份目标、备份计划、版本清理等。</p><p>备份类型：选择您想要备份的虚拟机类型。<br/> 设备：添加您想要备份的虚拟机。<br/> 备份目标：选择添加网络路径以将备份存储在网络位置，节省本地磁盘空间。<br/> 备份计划：选择您想要的备份方式和虚拟机备份计划。<br/> 版本清理：配置保留策略以自动删除旧备份文件，节省存储磁盘空间。</p><p>步骤3. 确认无误之后就可以点击右下角的“开始备份”按钮，然后选择“添加定时任务并立即备份”或“仅添加定时任务”，创建的任务将单独列出和监控，以进行恢复、进度检查和计划更改。</p><p>在此之后，如果您遇到了一些意外状况，就比如误删虚拟机，则可以通过备份来快速恢复虚拟机，或者您也可以选择将备份还原到新位置，从而快速创建相同的虚拟机，非常方便实用。</p><p>——————————华丽分割线——————————</p><p>虚拟化技术正在改变我们对IT资源的使用方式，VMware和其产品ESXi在这个变革中起着重要的作用。充分理解ESXi与VMware的区别，可以帮助我们更好地选择和应用虚拟化方案，从而优化我们的工作效率。希望大家看完本文之后，能够有所收获。</p><p>除此之外，也不要忘了定期备份虚拟机，借助傲梅企业备份旗舰版，定制更加符合您需求的企业级虚拟机备份解决方案，更加轻松地持续保护虚拟机数据安全，赶紧下载安装试一试吧！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ESXi是什么？&quot;&gt;ESXi是什么？&lt;/h1&gt;&lt;p&gt;ESXi是一个独立而轻量级的虚拟化平台，是VMware公司的一款企业级服务器虚拟化产品，它属于Type-1或本地虚拟机监视器（hypervisor），可以在硬件上运行虚拟机，直接与物理硬件进行交互，而无需通过操作</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>在Armbian系统上安装Docker的简明指南</title>
    <link href="https://langman.us.kg/html/armbian-docker/"/>
    <id>https://langman.us.kg/html/armbian-docker/</id>
    <published>2024-10-06T11:25:51.000Z</published>
    <updated>2024-10-10T13:32:13.339Z</updated>
    
    <content type="html"><![CDATA[<p>在Armbian系统上安装Docker是一个相对简单的过程，只要按照正确的步骤进行操作即可完成。下面，我们将通过简明扼要的方式，为您提供一份详细的安装指南。</p><p>首先，确保您已经成功安装了Armbian系统。如果您还没有安装，可以参考Armbian的官方文档或其他相关教程来完成安装。一旦您已经安装了Armbian系统，就可以开始安装Docker了。</p><h2 id="第一步：更新软件包列表">第一步：更新软件包列表</h2><p>在终端中执行以下命令，以更新软件包列表：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p>这将从官方软件源中获取最新的软件包列表。</p><h2 id="第二步：升级已安装的软件包">第二步：升级已安装的软件包</h2><p>接下来，执行以下命令来升级已安装的软件包：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt upgrade -y</span><br></pre></td></tr></table></figure><p>使用-y参数可以自动确认所有升级操作，无需手动输入确认。</p><h2 id="第三步：移除不需要的依赖包">第三步：移除不需要的依赖包</h2><p>为了保持系统的整洁和高效，我们可以移除不需要的依赖包。执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt autoremove -y</span><br></pre></td></tr></table></figure><p>这将自动删除不再需要的依赖包，释放系统资源。</p><h2 id="第四步：安装Docker">第四步：安装Docker</h2><p>现在，我们可以开始安装Docker了。在终端中执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install docker.io -y</span><br></pre></td></tr></table></figure><p>这将下载并安装Docker。安装过程中，可能会提示您确认一些依赖包的安装，使用-y参数可以自动确认。</p><h2 id="第五步：启用并运行Docker服务">第五步：启用并运行Docker服务</h2><p>安装完成后，我们需要启用并运行Docker服务。执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable --now docker</span><br></pre></td></tr></table></figure><p>这将启用Docker服务，并立即启动它。</p><p>至此，您已经成功在Armbian系统上安装了Docker。您可以通过运行docker version命令来验证Docker是否成功安装并运行。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><h2 id="如果一切正常，您将看到Docker的版本信息。">如果一切正常，您将看到Docker的版本信息。</h2><p>现在，您可以在Armbian系统上使用Docker来运行和管理容器了。Docker提供了丰富的功能和灵活性，使您能够轻松地部署、运行和管理应用程序。您可以参考Docker的官方文档或其他相关教程，深入了解Docker的使用方法和最佳实践。</p><p>希望本文能够帮助您在Armbian系统上成功安装Docker，并为您的应用程序提供强大的容器化支持。如有任何疑问或需要进一步帮助，请随时联系我们。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在Armbian系统上安装Docker是一个相对简单的过程，只要按照正确的步骤进行操作即可完成。下面，我们将通过简明扼要的方式，为您提供一份详细的安装指南。&lt;/p&gt;
&lt;p&gt;首先，确保您已经成功安装了Armbian系统。如果您还没有安装，可以参考Armbian的官方文档或其他</summary>
      
    
    
    
    <category term="armbian" scheme="https://langman.us.kg/categories/armbian/"/>
    
    <category term="docker" scheme="https://langman.us.kg/categories/armbian/docker/"/>
    
    
    <category term="armbian" scheme="https://langman.us.kg/tags/armbian/"/>
    
    <category term="docker" scheme="https://langman.us.kg/tags/docker/"/>
    
    <category term="系统" scheme="https://langman.us.kg/tags/%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>iKuai + OpenWrt旁路由，端口映射不生效的解决办法</title>
    <link href="https://langman.us.kg/html/io/"/>
    <id>https://langman.us.kg/html/io/</id>
    <published>2024-10-03T08:01:49.000Z</published>
    <updated>2024-10-10T13:33:59.612Z</updated>
    
    <content type="html"><![CDATA[<p>最近在网络环境使用配置了“iKuai + OpenWrt旁路由”模式的网络，使用起来感觉不错。</p><p>但是发现一个端口转发没有生效，经过逐一排查，最终发现是由于旁路由的问题引起的。<br>  <img src="/images/openwrtt.png"> </p><h2 id="建议排查项">建议排查项</h2><p>内网主机防火墙设置（可尝试先关闭防火墙）</p><p>路由器防火墙设置</p><p>尝试更换公网IP端口</p><p>尝试暂时取消旁路由</p><p>通过排除法逐一排查，最终确定问题是由于旁路由模式引起的。尝试不使用旁路由时，iKuai的端口映射是有效的。</p><p>那么在保留旁路由的情况下，如何让iKuai的端口映射生效呢？请参考下面的解决办法。</p><h2 id="解决办法">解决办法</h2><p>如果没有旁路由的情况下，模式是这样的：</p><p>公网IP（8.8.8.8:2222） -&gt; iKuai路由器（192.168.1.1） -&gt; 内网主机（192.168.1.5:2222）</p><p>这样并没有问题，但是如果加了旁路由后，发现公网IP（8.8.8.8:2222）无法访问，这时我们需要先将流量转发到旁路由，再由旁路由转发至内网目标主机，<br>模式是这样的：</p><p>公网IP（8.8.8.8:2222） -&gt; iKuai路由器（192.168.1.1） -&gt; 旁路由（192.168.1.2:2222） -&gt; 内网主机（192.168.1.5:2222）</p><p>通过这种网络模式，可以正常将公网流量转发至目标主机，遂问题解决。具体操作步骤如下：</p><p>一、在“iKuai路由器后台 - 网络设置 - 端口映射”添加一条转发至旁路由的规则，如下图。<br><img src="/images/ikuait.png"></p><p>二、登录旁路由（OpenWrt）后台，在“网络 - 防火墙 - 端口映射”将来自LAN端口（上面步骤的内网端口）的流量转发至内网的目标机器，如下图。<br><img src="/images/openwrttt.png"></p><p>最后保存并应用即可。</p><h2 id="总结">总结</h2><p>如果您内网机器的网关指向的是主路由（192.168.1.1），则不需要在旁路由进行映射。</p><p>但如果您内网机器网关指向的是旁路由（192.168.1.2），需要在主路由添加端口映射外，还需要在旁路由额外添加端口映射。</p><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近在网络环境使用配置了“iKuai + OpenWrt旁路由”模式的网络，使用起来感觉不错。&lt;/p&gt;
&lt;p&gt;但是发现一个端口转发没有生效，经过逐一排查，最终发现是由于旁路由的问题引起的。&lt;br&gt;  &lt;img src=&quot;/images/openwrtt.png&quot;&gt; &lt;/p&gt;</summary>
      
    
    
    
    <category term="知识" scheme="https://langman.us.kg/categories/%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="ikuai" scheme="https://langman.us.kg/tags/ikuai/"/>
    
    <category term="爱快" scheme="https://langman.us.kg/tags/%E7%88%B1%E5%BF%AB/"/>
    
    <category term="openwrt" scheme="https://langman.us.kg/tags/openwrt/"/>
    
    <category term="路由" scheme="https://langman.us.kg/tags/%E8%B7%AF%E7%94%B1/"/>
    
    <category term="旁路由" scheme="https://langman.us.kg/tags/%E6%97%81%E8%B7%AF%E7%94%B1/"/>
    
    <category term="端口" scheme="https://langman.us.kg/tags/%E7%AB%AF%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令大全</title>
    <link href="https://langman.us.kg/html/linux-command/"/>
    <id>https://langman.us.kg/html/linux-command/</id>
    <published>2024-10-01T13:53:58.000Z</published>
    <updated>2024-10-10T13:34:27.665Z</updated>
    
    <content type="html"><![CDATA[<p>Linux 命令大全</p><h2 id="1、文件管理">1、文件管理</h2><p>catchattrchgrpchmod<br>chowncksumcmpdiff<br>diffstatfilefindgit<br>gitviewindentcutln<br>lesslocatelsattrmattrib<br>mcmdelmdirmktemp<br>moremmovemreadmren<br>mtoolsmtoolstestmvod<br>pastepatchrcprm<br>slocatesplitteetmpwatch<br>touchumaskwhichcp<br>whereismcopymshowfatrhmask<br>scpawkreadupdatedb</p><h2 id="2、文档编辑">2、文档编辑</h2><p>colcolrmcommcsplit<br>edegrepexfgrep<br>fmtfoldgrepispell<br>jedjoejoinlook<br>mtypepicorgrepsed<br>sortspelltrexpr<br>uniqwclet </p><h2 id="3、文件传输">3、文件传输</h2><p>lprmlprlpqlpd<br>byeftpuutouupick<br>uucpuucicotftpncftp<br>ftpshutftpwhoftpcount </p><h2 id="4、磁盘管理">4、磁盘管理</h2><p>cddfdirsdu<br>edquotaejectmcdmdeltree<br>mdumkdirmlabelmmd<br>mrdmzippwdquota<br>mountmmountrmdirrmt<br>stattreeumountls<br>quotacheckquotaofflndirrepquota<br>quotaon   </p><h2 id="5、磁盘维护">5、磁盘维护</h2><p>badblockscfdiskdde2fsck<br>ext2edfsckfsck.minixfsconf<br>fdformathdparmmformatmkbootdisk<br>mkdosfsmke2fsmkfs.ext2mkfs.msdos<br>mkinitrdmkisofsmkswapmpartition<br>swaponsymlinkssyncmbadblocks<br>mkfs.minixfsck.ext2fdisklosetup<br>mkfssfdiskswapoff </p><h2 id="6、网络通讯">6、网络通讯</h2><p>apachectlarpwatchdipgetty<br>mingettyuuxtelnetuulog<br>uustatppp-offnetconfignc<br>httpdifconfigminicommesg<br>dnsconfwallnetstatping<br>pppstatssambasetserialtalk<br>traceroutettynewaliasesuuname<br>netconfwritestatserialefax<br>pppsetuptcpdumpytalkcu<br>smbdtestparmsmbclientshapecfg</p><h2 id="7、系统管理">7、系统管理</h2><p>adduserchfnuseradddate<br>exitfingerfwhiossleep<br>suspendgroupdelgroupmodhalt<br>killlastlastblogin<br>lognamelogoutpsnice<br>procinfotoppstreereboot<br>rloginrshsliploginscreen<br>shutdownrwhosudogitps<br>swatchtloadlogrotateuname<br>chshuserconfuserdelusermod<br>vlockwhowhoamiwhois<br>newgrprenicesuskill<br>widgroupaddfree</p><h2 id="8、系统设置">8、系统设置</h2><p>resetclearaliasdircolors<br>aumixbindchrootclock<br>crontabdeclaredepmoddmesg<br>enableevalexportpwunconv<br>grpconvrpminsmodkbdconfig<br>liloliloconfiglsmodminfo<br>setmodprobentsysvmouseconfig<br>passwdpwconvrdateresize<br>rmmodgrpunconvmodinfotime<br>setupsndconfigsetenvsetconsole<br>timeconfigulimitunsetchkconfig<br>apmdhwclockmkkickstartfbset<br>unaliasSVGATextModegpasswd </p><h2 id="9、备份压缩">9、备份压缩</h2><p>arbunzip2bzip2bzip2recover<br>gunzipunarjcompresscpio<br>dumpuuencodegzexegzip<br>lharestoretaruudecode<br>unzipzipzipinfo </p><h2 id="10、设备管理">10、设备管理</h2><p>setledsloadkeysrdevdumpkeys<br>MAKEDEVpoweroff  </p><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Linux 命令大全&lt;/p&gt;
&lt;h2 id=&quot;1、文件管理&quot;&gt;1、文件管理&lt;/h2&gt;&lt;p&gt;cat	chattr	chgrp	chmod&lt;br&gt;chown	cksum	cmp	diff&lt;br&gt;diffstat	file	find	git&lt;br&gt;gitview	indent	c</summary>
      
    
    
    
    <category term="linux" scheme="https://langman.us.kg/categories/linux/"/>
    
    
    <category term="linux" scheme="https://langman.us.kg/tags/linux/"/>
    
    <category term="命令" scheme="https://langman.us.kg/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Linux介绍</title>
    <link href="https://langman.us.kg/html/linux/"/>
    <id>https://langman.us.kg/html/linux/</id>
    <published>2024-10-01T13:45:44.000Z</published>
    <updated>2024-10-10T13:34:42.379Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux-是一种自由和开放源码的类-UNIX-操作系统。">Linux 是一种自由和开放源码的类 UNIX 操作系统。</h2><h3 id="Linux-英文解释为-Linux-is-not-Unix。">Linux 英文解释为 Linux is not Unix。</h3><p>Linux 是在 1991 由林纳斯·托瓦兹在赫尔辛基大学上学时创立的，主要受到 Minix 和 Unix 思想的启发。</p><h3 id="本教程，我们将为大家介绍如何使用-Linux。">本教程，我们将为大家介绍如何使用 Linux。</h3><p>Linux 其实很容易学，相信你们能很快学会。</p><h2 id="现在开始学习-Linux-！">现在开始学习 Linux ！</h2><h3 id="谁适合阅读？">谁适合阅读？</h3><p>本教程针对的是Linux服务器方面的知识，适合从事运维或后端开发的人员阅读。</p><h3 id="需要具备的知识？">需要具备的知识？</h3><p>如果你熟悉操作系统方面的知识，相信你会很快学会 Linux。</p><p>本教程将于 Linux 的发行版本 Centos 为例来为大家介绍 Linux 系统的应用。</p><h2 id="Linux-是开源的">Linux 是开源的</h2><p>Linux 遵循 GNU 通用公共许可证（GPL），任何个人和机构都可以自由地使用 Linux 的所有底层源代码，也可以自由地修改和再发布。</p><p>由于 Linux 是自由软件，任何人都可以创建一个符合自己需求的 Linux 发行版。</p><h2 id="目前主流的-Linux-版本有：">目前主流的 Linux 版本有：</h2><h3 id="Debian（及其派生版本Ubuntu、Linux-Mint）">Debian（及其派生版本Ubuntu、Linux Mint）</h3><h3 id="Fedora（及其相关版本Red-Hat-Enterprise-Linux、CentOS）">Fedora（及其相关版本Red Hat Enterprise Linux、CentOS）</h3><h3 id="openSUSE">openSUSE</h3><p>…<br>Linux 内核最初只是由芬兰人林纳斯·托瓦兹（Linus Torvalds）在赫尔辛基大学上学时出于个人爱好而编写的。</p><p>Linux 是一套免费使用和自由传播的类 Unix 操作系统，是一个基于 POSIX 和 UNIX 的多用户、多任务、支持多线程和多 CPU 的操作系统。</p><p>Linux 能运行主要的 UNIX 工具软件、应用程序和网络协议。它支持 32 位和 64 位硬件。Linux 继承了 Unix 以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</p><h2 id="Linux-的发行版">Linux 的发行版</h2><p>Linux 的发行版说简单点就是将 Linux 内核与应用软件做一个打包。</p><p><img src="/images/1001215237.png"></p><p>目前市面上较知名的发行版有：Ubuntu、RedHat、CentOS、Debian、Fedora、SuSE、OpenSUSE、Arch Linux、SolusOS 等。</p><p><img src="/images/1001215301.png"></p><h2 id="Linux-应用领域">Linux 应用领域</h2><p>今天各种场合都有使用各种 Linux 发行版，从嵌入式设备到超级计算机，并且在服务器领域确定了地位，通常服务器使用 LAMP（Linux + Apache + MySQL + PHP）或 LNMP（Linux + Nginx+ MySQL + PHP）组合。</p><p>目前 Linux 不仅在家庭与企业中使用，并且在政府中也很受欢迎。</p><p>巴西联邦政府由于支持 Linux 而世界闻名。<br>有新闻报道俄罗斯军队自己制造的 Linux 发布版的，做为 G.H.ost 项目已经取得成果。<br>印度的 Kerala 联邦计划在向全联邦的高中推广使用 Linux。<br>中华人民共和国为取得技术独立，在龙芯处理器中排他性地使用 Linux。<br>在西班牙的一些地区开发了自己的 Linux 发布版，并且在政府与教育领域广泛使用，如 Extremadura 地区的 gnuLinEx 和 Andalusia 地区的 Guadalinex。<br>葡萄牙同样使用自己的 Linux 发布版 Caixa Mágica，用于 Magalh?es 笔记本电脑和 e-escola 政府软件。<br>法国和德国同样开始逐步采用 Linux。</p><h2 id="Linux-vs-Windows">Linux vs Windows</h2><p>目前国内 Linux 更多的是应用于服务器上，而桌面操作系统更多使用的是 Windows。主要区别如下</p><h3 id="Windows">Windows</h3><p>1、界面统一，外壳程序固定所有 Windows 程序菜单几乎一致，快捷键也几乎相同。<br>2、驱动程序丰富，版本更新频繁。默认安装程序里面一般包含有该版本发布时流行的硬件驱动程序，<br>   之后所出的新硬件驱动依赖于硬件厂商提供。对于一些老硬件，如果没有了原配的驱动有时很难支持。<br>   另外，有时硬件厂商未提供所需版本的 Windows 下的驱动，也会比较头痛。<br>3、使用比较简单，容易入门。图形化界面对没有计算机背景知识的用户使用十分有利。<br>4、系统构造复杂、变化频繁，且知识、技能淘汰快，深入学习困难。<br>5、每一种特定功能可能都需要商业软件的支持，需要购买相应的授权。</p><h3 id="Linux">Linux</h3><p>1、图形界面风格依发布版不同而不同，可能互不兼容。GNU&#x2F;Linux 的终端机是从 UNIX 传承下来，基本命令和操作方法也几乎一致。<br>2、由志愿者开发，由 Linux 核心开发小组发布，很多硬件厂商基于版权考虑并未提供驱动程序，尽管多数无需手动安装，<br>   但是涉及安装则相对复杂，使得新用户面对驱动程序问题（是否存在和安装方法）会一筹莫展。<br>   但是在开源开发模式下，许多老硬件尽管在Windows下很难支持的也容易找到驱动。<br>   HP、Intel、AMD 等硬件厂商逐步不同程度支持开源驱动，问题正在得到缓解。<br>3、图形界面使用简单，容易入门。文字界面，需要学习才能掌握。<br>4、系统构造简单、稳定，且知识、技能传承性好，深入学习相对容易。<br>5、大部分软件都可以自由获取，同样功能的软件选择较少。</p><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Linux-是一种自由和开放源码的类-UNIX-操作系统。&quot;&gt;Linux 是一种自由和开放源码的类 UNIX 操作系统。&lt;/h2&gt;&lt;h3 id=&quot;Linux-英文解释为-Linux-is-not-Unix。&quot;&gt;Linux 英文解释为 Linux is not Un</summary>
      
    
    
    
    <category term="linux" scheme="https://langman.us.kg/categories/linux/"/>
    
    
    <category term="linux" scheme="https://langman.us.kg/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>测试图片使用效果</title>
    <link href="https://langman.us.kg/html/pict/"/>
    <id>https://langman.us.kg/html/pict/</id>
    <published>2024-09-29T00:11:54.000Z</published>
    <updated>2024-10-09T08:54:54.081Z</updated>
    
    <content type="html"><![CDATA[<style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
.video-container {
    position: relative;
    width: 100%;
    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>互联网是如何工作的呢？如何制作属于您自己的网站？</title>
    <link href="https://langman.us.kg/html/www/"/>
    <id>https://langman.us.kg/html/www/</id>
    <published>2024-09-28T23:51:02.000Z</published>
    <updated>2024-10-10T13:35:36.407Z</updated>
    
    <content type="html"><![CDATA[<h2 id="互联网是如何工作的呢？如何制作属于您自己的网站？">互联网是如何工作的呢？如何制作属于您自己的网站？</h2><h2 id="什么是网站主机">什么是网站主机?</h2><p>什么是 Internet 服务提供商（ISP）？什么是 DNS？</p><h2 id="什么是万维网（-World-Wide-Web）？">什么是万维网（ World Wide Web）？</h2><p>Web是一个遍布全球的计算机网络。<br>网络中的所有计算机均可彼此相互通信。<br>所有的计算机都使用被称为 HTTP 的通信标准。</p><h2 id="WWW-如何工作？">WWW 如何工作？</h2><p>Web 信息存储于被称为网页的文档中。<br>网页是存储于名为 web 服务器的计算机中的文件。<br>读取网页的计算机可称为 web 客户机。<br>web 客户机通过名为 web 浏览器的程序来查看页面。<br>主流的浏览器有 Google Chrome、Microsoft Edge 和 Firefox。<br><img src="/images/1001214028.png"></p><h2 id="浏览器如何读取网页？">浏览器如何读取网页？</h2><p>浏览器可以通过一个请求 (request) 从 web 服务器读取页面。<br>请求是包含页面地址的标准 HTTP 请求。<br>网页地址实例: <a href="https://www.apple.com/">https://www.apple.com/</a></p><h2 id="浏览器如何显示网页？">浏览器如何显示网页？</h2><p>所有的网页都含有供显示的指令。<br>浏览器通过读取这些指令来显示页面。<br>最常用的显示指令是 HTML 标签。<br>HTML 标签格式：<p>这是一个段落。</p>.<br>如果你想学习更多关于HTML的知识请访问我们的 HTML 教程.</p><h2 id="什么是-Web-服务器？">什么是 Web 服务器？</h2><p>您的所有网页的集合被称为网站。<br>要想让别人看到您的页面，就必须对网站进行发布。<br>您必须把网站拷贝到一台 web 服务器，才能完成对网站的发布。<br>如果您的 PC 连入网络的话，您也可以把它当作一台 web 服务器。<br>大多数的情况是使用由 ISP 提供的 web 主机。</p><h2 id="什么是-ISP-Internet-Service-Provider">什么是 ISP( Internet Service Provider )?</h2><p>ISP 是 Internet Service Provider（互联网服务提供商）的缩写，它指的是提供互联网连接服务的公司或组织。</p><p>中国三大 ISP：中国电信，中国移动，中国联通。</p><p>ISP 指的是 Internet 服务提供商。<br>ISP 可提供 Internet 服务。<br>最常见的 Internet 服务是网站主机。<br>网站主机服务可把您的网站存放到一个公共的服务器上。<br>网站主机服务通常包括了域名注册服务。<br>DNS<br>域名系统（英语：Domain Name System，缩写：DNS）是互联网的一项服务。它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。<br><img src="/source/images/wlxx.png"></p><h2 id="总结">总结</h2><p>如果您希望其它人看到您的网站，就必须把网站拷贝到一个公共的服务器。即使您可以使用自己的 PC 来做 web 服务器，最常见的做法还是通过 ISP 来存放网站。</p><p>包含在 web 主机解决方案中的还有域名注册和标准的电子邮件服务。</p><p>您可以在接下来的章节阅读到更多有关域名注册、电子邮件和其他服务的内容。</p><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;互联网是如何工作的呢？如何制作属于您自己的网站？&quot;&gt;互联网是如何工作的呢？如何制作属于您自己的网站？&lt;/h2&gt;&lt;h2 id=&quot;什么是网站主机&quot;&gt;什么是网站主机?&lt;/h2&gt;&lt;p&gt;什么是 Internet 服务提供商（ISP）？什么是 DNS？&lt;/p&gt;
&lt;h2 id=</summary>
      
    
    
    
    
    <category term="互联网" scheme="https://langman.us.kg/tags/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
    <category term="网站" scheme="https://langman.us.kg/tags/%E7%BD%91%E7%AB%99/"/>
    
    <category term="web" scheme="https://langman.us.kg/tags/web/"/>
    
    <category term="www" scheme="https://langman.us.kg/tags/www/"/>
    
  </entry>
  
  <entry>
    <title>市面常见浏览器介绍</title>
    <link href="https://langman.us.kg/html/browser/"/>
    <id>https://langman.us.kg/html/browser/</id>
    <published>2024-09-28T23:50:56.000Z</published>
    <updated>2024-10-10T13:32:42.285Z</updated>
    
    <content type="html"><![CDATA[<p>浏览器<br><img src="/images/iell.png"><br>Internet Explorer（IE浏览器）<br>Internet Explorer（IE浏览器）是微软公司（Microsoft）发行的一款 web 浏览器。 它发布于 1995 年，是当今最流行的浏览器之一。</p><p>Microsoft Edge 浏览器<br>微软新一代浏览器。 微软新的 IE 浏览器项目 Project Spartan 在 Build 2015 上正式更名为 Microsoft Edge。最新的 Edge 采用了 Chromium 内核，当然也兼容以前 IE 的功能。</p><p>ChromeGoogle Chrome（谷歌浏览器）<br>Google Chrome（谷歌浏览器）是由 Google 公司开发一款开源免费的 web 浏览器。它发布于 2008 年，是当今最常用的浏览器。</p><p>FirefoxFirefox（火狐浏览器）<br>Firefox（火狐浏览器）是来自 Mozilla 的一款 web 浏览器。它发布于 2004 年，也是当今最流行的浏览器之一。</p><p>SafariApple Safari（苹果 Safari 浏览器）<br>Safari 是由苹果公司开发的一款 web 浏览器，它是 Mac 系统的默认浏览器。Safari 以其时尚的设计而著称。</p><p>OperaOpera 浏览器<br>Opera 是挪威人发明的一款 web 浏览器。它以下列特性而闻名于世：快速小巧、符合工业标准、适用于多种操作系统。对于一系列小型设备诸如手机和掌上电脑来说，Opera 无疑是首选的浏览器。</p><p>MozillaMozilla 项目<br>Mozilla 项目是从 Netscape 的基础上发展起来的。今天，基于 Mozilla 的浏览器已经演变为互联网上最大的浏览器家族。</p><p>NetscapeNetscape 浏览器<br>Netscape 是首个商业化的 web 浏览器。它发布于 1994 年。在 IE 的竞争下，Netscape 逐渐丧失了它的市场份额。Netscape 的官方开发结束于 2008 年 2 月。</p><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;浏览器&lt;br&gt;&lt;img src=&quot;/images/iell.png&quot;&gt;	&lt;br&gt;Internet Explorer（IE浏览器）&lt;br&gt;Internet Explorer（IE浏览器）是微软公司（Microsoft）发行的一款 web 浏览器。 它发布于 1995 年，是当</summary>
      
    
    
    
    <category term="知识" scheme="https://langman.us.kg/categories/%E7%9F%A5%E8%AF%86/"/>
    
    <category term="信息" scheme="https://langman.us.kg/categories/%E7%9F%A5%E8%AF%86/%E4%BF%A1%E6%81%AF/"/>
    
    
    <category term="浏览器" scheme="https://langman.us.kg/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="ie" scheme="https://langman.us.kg/tags/ie/"/>
    
    <category term="chrome" scheme="https://langman.us.kg/tags/chrome/"/>
    
    <category term="firefox" scheme="https://langman.us.kg/tags/firefox/"/>
    
    <category term="Safari" scheme="https://langman.us.kg/tags/Safari/"/>
    
    <category term="Opera" scheme="https://langman.us.kg/tags/Opera/"/>
    
    <category term="Mozilla" scheme="https://langman.us.kg/tags/Mozilla/"/>
    
    <category term="Netscape" scheme="https://langman.us.kg/tags/Netscape/"/>
    
  </entry>
  
  <entry>
    <title>这里是测试分享视频使用</title>
    <link href="https://langman.us.kg/html/video/"/>
    <id>https://langman.us.kg/html/video/</id>
    <published>2024-09-28T23:45:05.000Z</published>
    <updated>2024-10-09T08:54:34.238Z</updated>
    
    <content type="html"><![CDATA[<div class="video-container">[123](https://youtube.com/shorts/zUsIrI-dcss?si=nnm7non0U3xvKckG)</div><div class="video-container">【环保公益短片《一次》| 让环保成为我们与这颗蓝色星球共存的桥梁 让美好成为现实 我们只需要一次就够了】 https://www.bilibili.com/video/BV11U4y1p7D2/?share_source=copy_web</div>我来看看新闻了。。<style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}<p>.video-container iframe {<br>    position: absolute;<br>    top: 0;<br>    left: 0;<br>    width: 100%;<br>    height: 100%;<br>}<br></style></p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;video-container&quot;&gt;
[123](https://youtube.com/shorts/zUsIrI-dcss?si=nnm7non0U3xvKckG)
&lt;/div&gt;
&lt;div class=&quot;video-container&quot;&gt;
【环保公益短片</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>个人博客网站建设工具</title>
    <link href="https://langman.us.kg/html/webblog/"/>
    <id>https://langman.us.kg/html/webblog/</id>
    <published>2024-07-28T23:50:44.000Z</published>
    <updated>2024-10-09T15:26:14.992Z</updated>
    
    <content type="html"><![CDATA[<p>202X年了，应该极少有人从0开始搭建网站了吧。<br>一个优秀的博客框架，可以帮助你快速、高效的搭建个人网站，让你事半功倍。</p><h1 id="Halo">Halo</h1><p>Halo是一个基于Java的开源博客系统，它使用了Spring Boot、Freemarker、MySql、JPA、Lombok、Swagger2等技术栈。Halo的设计理念是现代、简洁和高效，采用可插拔架构，功能模块之间耦合度低、灵活性提高。支持用户按需安装、卸载插件，操作便捷。同时提供插件开发接口以确保较高扩展性和可维护性。<br>它提供了丰富的插件和主题支持，允许用户轻松定制博客界面和功能。</p><h1 id="Hexo">Hexo</h1><p>Hexo是一个快速、简洁且强大的静态站点生成器，它基于Node.js。Hexo将Markdown格式的文本转换为HTML页面，并生成完整的静态网站，这使得部署和维护变得简单。它支持多种主题和插件，可以高度定制化。</p><h1 id="WordPress">WordPress</h1><p>WordPress是世界上最流行的博客和内容管理系统（CMS）。它基于PHP和MySQL，提供了一个易于使用的编辑界面和丰富的插件生态系统，使得用户可以构建复杂的网站而无需深入的编程知识。WordPress既适合个人博客，也适合大型企业网站。</p><h1 id="Jekyll">Jekyll</h1><p>Jekyll是一个静态站点生成器，最初由GitHub创始人Tom Preston-Werner创建。它将Markdown和HTML文件转换为静态网站，非常适合创建个人博客和项目页面。Jekyll是GitHub Pages的默认生成器，因此非常适用于托管在GitHub上的项目。</p><h1 id="Hugo">Hugo</h1><p>Hugo是一个超快的静态网站生成器，它使用Go语言编写。Hugo的特点是生成速度快，即使在大型项目中也能迅速完成构建。它支持多种主题，提供了强大的短代码系统和模板引擎，可以用来构建复杂的功能。</p><h1 id="VuePress">VuePress</h1><p>VuePress是一个基于Vue.js的静态站点生成器，特别适合创建技术文档。它提供了实时预览功能和一个简洁的编辑界面，使得编写文档变得直观和高效。VuePress支持Markdown语法，可以轻松地集成Vue组件。<br>🍠 每个框架都有其独特的优势和适用场景，选择哪一个取决于你的技术栈、需求和偏好。<br>高清图片<br>高质量的图片经常会被用于博客网站的开屏背景、文章封面、博文配图等等。下面几个网站提供了高质量、高清、免费可商用的图片。</p><p>unsplash<br>pexels<br>pixabay<br>stocksnap<br>visualhunt</p><p>随机图片API<br>随机图片API可以让用户每次访问，网页的开屏图片或者文章封面，都显示不同的随机图片。 下面是几个提供随机图片的网站。</p><p>tuapi.eees.cc&#x2F; - 自适应随机图片API - 支持HTTPS协议|随机动漫API|随机美女API|随机必应壁纸API|随机风景API<br>IMGAPI-图片API - 网站提供了不同类型的随机图片API接口，可以设置随机图片的分类、分辨率、调用类型等。<br>img.xjh.me&#x2F;random_img.…] - 岁月小筑随机图片API接口-随机背景图片-随机图片API<br>api.dujin.org&#x2F;bing&#x2F;1366.p… - 提供Bing必应图片，还支持其他分辨率以及移动端（1920.php、m.php）。<br>随机图片API - 独鼠小屋 (singlemouse.cn)</p><h1 id="图标与徽章">图标与徽章</h1><p>Badge<br>看看下方这个长条状的彩色图片，它就是badge, 在github开源项目的ReadMe文档或者产品的详情页里，经常会看到它。 它有助于生动、快速的告诉其他人关于项目的关键信息。</p><p>Shields.io – Original home of the badges, launched in 2014.  配合下面的 Simple Icons 可以简单快速的生成丰富多样的个性化SVG格式的badge。<br>Badgen.net – Fast badge generating service launched in 2018.<br>NodeICO – Large-format status badges for Node.js projects – which were once very popular!<br>PlayBadges – Show off your Play Store™ app’s downloads and ratings in your repo<br>Badgie – Scans the contents of your repository and adds badges based on what it finds.<br>Badges – Node.js&#x2F;Deno&#x2F;Browser npm package for rendering the HTML of various badges<br>Projectz – Render Badges into your README based on your package.json configuration</p><h1 id="Icon">Icon</h1><p>iconfont - 阿里妈妈MUX倾力打造的矢量图标管理、交流平台。<br>Simple Icons – Home of the bulk of the icons used by both Shields and Badgen.<br>Custom Icon Badges – Allows users to more easily use Octicons and their own icons and logos on shields.io badges.<br>Simple Badges – Website for finding and previewing Simple Icons on shields.io badges.<br>icons-8 - 超过1万个图标，所以，无论用于哪种设计作品，您都可以找到风格统一的图标。</p><h1 id="页面设计">页面设计</h1><h2 id="Collect-UI">Collect UI</h2><p>每日更新页面UI设计，针对网页中各种不同类型页面：如登录页、注册页、404页面、用户主页、音乐播放页、付款成功页等等，均提供了海量的精彩、新颖的UI设计。 你可以结合自己的网站内容和特点，从该网站中获取灵感。<br>即时设计<br>可云端编辑的专业级 UI 设计工具，为中国设计师量身打造<br>Windows 也能用的「协作版 Sketch」。支持网页端、MacOS、Windows、Linux、iOS、Android 和微信小程序。</p><h2 id="Markdown">Markdown</h2><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，Markdown文件的后缀名便是 .md 。</p><h2 id="Typora">Typora</h2><p>适用平台：MacOS、Windows、Linux<br>简洁优雅功能丰富的Markdown编辑器神器，饱受暂予。不过新版本开始收费了，你可以在网上找到typora最后一个免费版本。</p><h2 id="MarkText">MarkText</h2><p>适用平台：MacOS、Windows、Linux<br>一个简单而优雅的开源降价编辑器，专注于速度和可用性。 项目github地址：marktext&#x2F;marktext: 📝 。<br>Mark Text一款基于 MIT 协议开源的 Markdown 编辑器，支持 WYSIWYG（所见即所得）的编辑方式，它专注于速度和可用性。Mark Text是具有各种markdown扩展名的markdown实时预览编辑器。</p><h2 id="Notable">Notable</h2><p>适用平台：MacOS、Windows、Linux<br>Notable是基于 GitHub Flavored Markdown (GFM)编写的，相比于标准Markdown语法，GFM语法新增了URL自动链接，代码块，语法高亮，删除线，表格，锚点，HTML等功能，也就是说这些基本功能Notable都是支持的。</p><h2 id="MacDown">MacDown</h2><p>适用平台：macOS<br>开源且免费的MacOS上的markdown编辑器。</p><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;202X年了，应该极少有人从0开始搭建网站了吧。&lt;br&gt;一个优秀的博客框架，可以帮助你快速、高效的搭建个人网站，让你事半功倍。&lt;/p&gt;
&lt;h1 id=&quot;Halo&quot;&gt;Halo&lt;/h1&gt;&lt;p&gt;Halo是一个基于Java的开源博客系统，它使用了Spring Boot、Freema</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Docker搭建LNMP建站环境</title>
    <link href="https://langman.us.kg/html/docker-lnmp/"/>
    <id>https://langman.us.kg/html/docker-lnmp/</id>
    <published>2024-02-29T18:30:56.000Z</published>
    <updated>2024-10-10T13:33:33.507Z</updated>
    
    <content type="html"><![CDATA[<p>docker搭建建站环境，学习手动搭建网站。！</p><p>我们在搭建过程会使用到LNMP （Linux Nginx Mysql Php）</p><p>学会搭建以后，只要给我们源码就可以搭建网站。 </p><h2 id="更新系统">更新系统</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt update -y  &amp;&amp; apt upgrade -y &amp;&amp; apt install -y curl wget <span class="built_in">sudo</span> socat</span><br></pre></td></tr></table></figure><h2 id="安装docker">安装docker</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | sh</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -L <span class="string">&quot;https://github.com/docker/compose/releases/latest/download/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><h2 id="创建目录">创建目录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> web</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> web</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> html</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> mysql</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> certs</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> nginx.conf</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nano docker-compose.yml</span><br></pre></td></tr></table></figure><h2 id="配置docker-compose">配置docker-compose</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  nginx:</span><br><span class="line">    image: nginx</span><br><span class="line">    container_name: nginx</span><br><span class="line">    restart: always</span><br><span class="line">    ports:</span><br><span class="line">      - 80:80</span><br><span class="line">      - 443:443      </span><br><span class="line">    volumes:</span><br><span class="line">      - ./nginx.conf:/etc/nginx/nginx.conf</span><br><span class="line">      - ./certs:/etc/nginx/certs      </span><br><span class="line">      - ./html:/var/www/html</span><br><span class="line"></span><br><span class="line">  php:</span><br><span class="line">    image: php:fpm</span><br><span class="line">    container_name: php</span><br><span class="line">    restart: always</span><br><span class="line">    volumes:</span><br><span class="line">      - ./html:/var/www/html</span><br><span class="line"></span><br><span class="line">  mysql:</span><br><span class="line">    image: mysql</span><br><span class="line">    container_name: mysql</span><br><span class="line">    restart: always</span><br><span class="line">    volumes:</span><br><span class="line">      - ./mysql:/var/lib/mysql</span><br><span class="line">    environment:</span><br><span class="line">      - MYSQL_ROOT_PASSWORD=webroot</span><br><span class="line">      - MYSQL_DATABASE=web</span><br><span class="line">      - MYSQL_USER=kejilion</span><br><span class="line">      - MYSQL_PASSWORD=kejilionYYDS</span><br></pre></td></tr></table></figure><h2 id="申请证书">申请证书</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl https://get.acme.sh | sh</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~/.acme.sh/acme.sh --register-account -m xxxx@gmail.com</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~/.acme.sh/acme.sh --issue -d s.kejilion.eu.org --standalone</span><br></pre></td></tr></table></figure><h2 id="下载证书">下载证书</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~/.acme.sh/acme.sh --installcert -d s.kejilion.eu.org --key-file /home/web/certs/key.pem --fullchain-file /home/web/certs/cert.pem</span><br></pre></td></tr></table></figure><h2 id="NGINX配置">NGINX配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    </span><br><span class="line">    client_max_body_size 1000m;  </span><br><span class="line">    <span class="comment">#上传限制参数1G以内文件可上传</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># HTTP server</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name yuming.com;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Redirect all HTTP requests to HTTPS</span></span><br><span class="line">    <span class="built_in">return</span> 301 https://$host<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># HTTPS server</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl http2;</span><br><span class="line">    server_name yuming.com;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># http2 on;</span></span><br><span class="line">        </span><br><span class="line">    ssl_certificate /etc/nginx/certs/cert.pem;</span><br><span class="line">    ssl_certificate_key /etc/nginx/certs/key.pem;</span><br><span class="line"></span><br><span class="line">    root /var/www/html;</span><br><span class="line">    index index.php;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># rewrite ^/vip.php(.*)$ /vip.php?s=$1 last;</span></span><br><span class="line">        </span><br><span class="line">    try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ =404;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># PHP-FPM configuration</span></span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        fastcgi_pass php:9000;</span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME $document_root<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="下载源码">下载源码</h2><p>maccms10</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/web &amp;&amp; wget https://github.com/magicblack/maccms_down/raw/master/maccms10.zip &amp;&amp; <span class="built_in">sudo</span> apt-get install -y unzip &amp;&amp; unzip maccms10.zip -d html &amp;&amp; <span class="built_in">rm</span> maccms10.zip &amp;&amp; <span class="built_in">mv</span> /home/web/html/maccms10-master/* /home/web/html/</span><br></pre></td></tr></table></figure><p>wordpress</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/web &amp;&amp; wget https://cn.wordpress.org/wordpress-6.2.2-zh_CN.zip &amp;&amp; <span class="built_in">sudo</span> apt-get install -y unzip &amp;&amp; unzip wordpress-6.2.2-zh_CN.zip -d html &amp;&amp; <span class="built_in">rm</span> wordpress-6.2.2-zh_CN.zip &amp;&amp; <span class="built_in">mv</span> /home/web/html/wordpress/* /home/web/html/</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/web &amp;&amp; docker-compose up -d</span><br></pre></td></tr></table></figure><h2 id="赋予权限">赋予权限</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it nginx <span class="built_in">chmod</span> -R 777 /var/www/html</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it php <span class="built_in">chmod</span> -R 777 /var/www/html</span><br></pre></td></tr></table></figure><h2 id="安装PHP扩展">安装PHP扩展</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> php apt update &amp;&amp; docker <span class="built_in">exec</span> php apt install -y libmariadb-dev-compat libmariadb-dev libzip-dev libmagickwand-dev imagemagick</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> php docker-php-ext-install mysqli pdo_mysql zip exif gd intl bcmath opcache</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> php pecl install imagick &amp;&amp; docker <span class="built_in">exec</span> php sh -c <span class="string">&#x27;echo &quot;extension=imagick.so&quot; &gt; /usr/local/etc/php/conf.d/imagick.ini&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it php sh -c <span class="string">&#x27;echo &quot;upload_max_filesize=50M \n post_max_size=50M&quot; &gt; /usr/local/etc/php/conf.d/uploads.ini&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="重启php">重启php</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker restart php</span><br></pre></td></tr></table></figure><p>可以去访问你的域名了，完成wp安装向导后再输入下面的命令！</p><p>跳过FTP更新主题插件的限制</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;define(&#x27;FS_METHOD&#x27;, &#x27;direct&#x27;);&quot;</span> &gt;&gt; /home/web/html/wp-config.php</span><br></pre></td></tr></table></figure><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;docker搭建建站环境，学习手动搭建网站。！&lt;/p&gt;
&lt;p&gt;我们在搭建过程会使用到LNMP （Linux Nginx Mysql Php）&lt;/p&gt;
&lt;p&gt;学会搭建以后，只要给我们源码就可以搭建网站。 &lt;/p&gt;
&lt;h2 id=&quot;更新系统&quot;&gt;更新系统&lt;/h2&gt;&lt;figure </summary>
      
    
    
    
    <category term="docker" scheme="https://langman.us.kg/categories/docker/"/>
    
    
    <category term="docker" scheme="https://langman.us.kg/tags/docker/"/>
    
    <category term="linux" scheme="https://langman.us.kg/tags/linux/"/>
    
    <category term="nginx" scheme="https://langman.us.kg/tags/nginx/"/>
    
    <category term="php" scheme="https://langman.us.kg/tags/php/"/>
    
    <category term="mysql" scheme="https://langman.us.kg/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Docker 基础命令大全</title>
    <link href="https://langman.us.kg/html/docker-command/"/>
    <id>https://langman.us.kg/html/docker-command/</id>
    <published>2024-02-29T18:16:44.000Z</published>
    <updated>2024-10-10T13:33:05.216Z</updated>
    
    <content type="html"><![CDATA[<p>Docker是一种容器化技术，允许开发者将应用程序和所有依赖项打包到一个独立的容器中，<br>以便在不同环境中轻松部署和运行。还可以发布到docker应用市场给别人用。</p><h2 id="更新系统">更新系统</h2><h3 id="Debian和Ubuntu">Debian和Ubuntu</h3><p>apt update -y  &amp;&amp; apt upgrade -y &amp;&amp; apt install -y curl wget sudo</p><h3 id="CentOS">CentOS</h3><p>yum -y update &amp;&amp; yum -y upgrade &amp;&amp; yum -y install curl wget sudo</p><h2 id="docker环境">docker环境</h2><h3 id="安装环境">安装环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | sh</span><br></pre></td></tr></table></figure><h3 id="启动环境">启动环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><p>开机自启动环境</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><p>查看docker环境版本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker --version</span><br></pre></td></tr></table></figure><h2 id="镜像">镜像</h2><p>查看本地镜像列表</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker image <span class="built_in">ls</span></span><br></pre></td></tr></table></figure><h3 id="下载更新镜像">下载更新镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull nginx:latest</span><br></pre></td></tr></table></figure><h3 id="删除镜像">删除镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rmi nginx:latest</span><br></pre></td></tr></table></figure><h2 id="容器">容器</h2><h3 id="部署新容器">部署新容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name nginx --restart always -p 80:80 -p 443:443 -v /home/docker/nginx/conf.d:/etc/nginx/conf.d -v /home/docker/nginx/certs:/etc/nginx/certs -v /home/docker/nginx/html:/var/www/html nginx:latest</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name nextcloud --restart=always -p 8080:80 -v /home/docker/nextcloud:/var/www/html -e NEXTCLOUD_ADMIN_USER=kejilion -e NEXTCLOUD_ADMIN_PASSWORD=kejilionYYDS nextcloud</span><br></pre></td></tr></table></figure><p>查看所有容器</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p>查看运行的容器</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><h3 id="启动容器">启动容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker start nginx</span><br></pre></td></tr></table></figure><p>暂停容器</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop nginx</span><br></pre></td></tr></table></figure><p>删除容器</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> nginx</span><br></pre></td></tr></table></figure><p>强制删除容器</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> -f nginx</span><br></pre></td></tr></table></figure><p>启动所有容器</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker start $(<span class="built_in">sudo</span> docker ps -a -q)</span><br></pre></td></tr></table></figure><p>暂停所有容器</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop $(<span class="built_in">sudo</span> docker ps -a -q)</span><br></pre></td></tr></table></figure><p>暂停所有容器</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> -f $(<span class="built_in">sudo</span> docker ps -a -q)</span><br></pre></td></tr></table></figure><h3 id="进入容器">进入容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it nginx bash</span><br></pre></td></tr></table></figure><p>查看容器日志</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker logs nginx</span><br></pre></td></tr></table></figure><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Docker是一种容器化技术，允许开发者将应用程序和所有依赖项打包到一个独立的容器中，&lt;br&gt;以便在不同环境中轻松部署和运行。还可以发布到docker应用市场给别人用。&lt;/p&gt;
&lt;h2 id=&quot;更新系统&quot;&gt;更新系统&lt;/h2&gt;&lt;h3 id=&quot;Debian和Ubuntu&quot;&gt;De</summary>
      
    
    
    
    <category term="linux" scheme="https://langman.us.kg/categories/linux/"/>
    
    
    <category term="docker" scheme="https://langman.us.kg/tags/docker/"/>
    
    <category term="linux" scheme="https://langman.us.kg/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>玩客云安装casaos、Docker、qbittorrent、zerotier、青龙面板自动化签到</title>
    <link href="https://langman.us.kg/html/wkywf/"/>
    <id>https://langman.us.kg/html/wkywf/</id>
    <published>2023-09-28T16:12:45.000Z</published>
    <updated>2024-10-10T06:33:23.798Z</updated>
    
    <content type="html"><![CDATA[<p>刷机教程就不说了，网上太多了<br>（需要注意的是如果以前刷过别的第三方固件直接按住复位键插电就可以了）</p><p>玩客云armbian固件下载地址：</p><p><a href="">https://github.com/hzyitc/armbian-onecloud/releases</a></p><p>casaos还不能支持最新版的底包，所以我们需要下载之前的老版本。在下载页面上往下拉，找到6.1.9这个版本。我们需要去下载带mini和burn字样的刷机包。mini代表最小安装包，burn代表线刷包。</p><p>安装完成后，查看路由器后台分配到的玩客云IP地址，名为onecloud</p><p>SSH连接，账号：root，密码：1234（密码输入不会显示），第一次进入会提示需要更改密码，更改即可</p><p>检查时间</p><blockquote><p>date -R</p></blockquote><p>如果时区及时间不对。执行下面的操作</p><blockquote><p>cp &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;Shanghai  &#x2F;etc&#x2F;localtime</p></blockquote><p>更新软件（非必要）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get update &amp;&amp; apt-get upgrade</span><br></pre></td></tr></table></figure><p>然后就是安装casaos系统了，casaos的安装只要这一条代码就可以，过程可能时间比较长，耐心等待就好。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -qO- https://get.casaos.io | bash</span><br></pre></td></tr></table></figure><p>网络不好的小伙伴可以执行这个国内源代码试试（注意使用了国内源的一键安装以后是无法自动升级casaos系统的）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -fsSL cn-get.casaos.io | bash</span><br></pre></td></tr></table></figure><p>安装完成后浏览器输入玩客云IP地址进入casaos</p><p>换源（如果能正常更新软件，可以不更换源）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nano /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>然后按方向键到最后在空白处添加以下代码：</p><blockquote><p>deb <a href="https://mirrors.tuna.tsinghua.edu.cn/debian/">https://mirrors.tuna.tsinghua.edu.cn/debian/</a> bullseye main contrib non-free<br>#deb-src <a href="https://mirrors.tuna.tsinghua.edu.cn/debian/">https://mirrors.tuna.tsinghua.edu.cn/debian/</a> bullseye main contrib non-free<br>deb <a href="https://mirrors.tuna.tsinghua.edu.cn/debian/">https://mirrors.tuna.tsinghua.edu.cn/debian/</a> bullseye-updates main contrib non-free<br>#deb-src <a href="https://mirrors.tuna.tsinghua.edu.cn/debian/">https://mirrors.tuna.tsinghua.edu.cn/debian/</a> bullseye-updates main contrib non-free<br>deb <a href="https://mirrors.tuna.tsinghua.edu.cn/debian/">https://mirrors.tuna.tsinghua.edu.cn/debian/</a> bullseye-backports main contrib non-free<br>#deb-src <a href="https://mirrors.tuna.tsinghua.edu.cn/debian/">https://mirrors.tuna.tsinghua.edu.cn/debian/</a> bullseye-backports main contrib non-free<br>deb <a href="https://mirrors.tuna.tsinghua.edu.cn/debian-security">https://mirrors.tuna.tsinghua.edu.cn/debian-security</a> bullseye-security main contrib non-free<br>#deb-src <a href="https://mirrors.tuna.tsinghua.edu.cn/debian-security">https://mirrors.tuna.tsinghua.edu.cn/debian-security</a> bullseye-security main contrib non-free<br>换源是可以把原先的软件源用“#”注释掉。比如<br>#deb-src <a href="https://mirrors.tuna.tsinghua.edu.cn/debian/">https://mirrors.tuna.tsinghua.edu.cn/debian/</a> bullseye main contrib non-free</p></blockquote><p>这句前面加了“#”，系统就不会运行这句代码了</p><p>换源之后运行下面的命令，更新一下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure><p>更新完重启一次，不容易出错。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><p>商店里面的qb应该不支持ARM32了</p><p>我们运行安装qb的命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install qbittorrent-nox</span><br></pre></td></tr></table></figure><p>等待命令执行完即可。</p><p>安装完成后，我们创建qBittorrent这个服务，方便设置开机自启。</p><p>执行如下命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nano /etc/systemd/system/qbittorrent.service</span><br></pre></td></tr></table></figure><p>然后将下面的内容粘贴并保存：</p><blockquote><p>[Unit]<br>Description&#x3D;qBittorrent Daemon Service<br>After&#x3D;network.target<br>[Service]<br>User&#x3D;root<br>ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;qbittorrent-nox<br>ExecStop&#x3D;&#x2F;usr&#x2F;bin&#x2F;killall -w qbittorrent-nox<br>[Install]<br>WantedBy&#x3D;multi-user.target</p></blockquote><p>执行下面的命令更新服务：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>常用命令<br>启动qb</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service qbittorrent start</span><br></pre></td></tr></table></figure><p>关闭qb</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service qbittorrent stop</span><br></pre></td></tr></table></figure><p>查看qb状态</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service qbittorrent status</span><br></pre></td></tr></table></figure><p>开机自启</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl enable qbittorrent</span><br></pre></td></tr></table></figure><p>关闭开机自启</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl disable qbitorrent</span><br></pre></td></tr></table></figure><p>访问WebUI<br>访问如下地址：</p><blockquote><p>Armbian设备的IP:8080  用户名：admin密码：adminadmin（两个admin）</p></blockquote><p>casaos会自动挂载USB硬盘，下载路径要从casaos里复制，比如&#x2F;media&#x2F;devmon&#x2F;新加卷<br>远程访问玩客云<br>建议用zerotier或者tailscale，免费好用。这里以zerotier为例：</p><p>玩客云要选择arm32v7，N1选择arm64v8，不要选错</p><p><a href="https://hub.docker.com/r/bltavares/zerotier/tags">https://hub.docker.com/r/bltavares/zerotier/tags</a></p><p>拉取镜像</p><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">docker pull bltavares/zerotier:<span class="number">1.10</span>.<span class="number">3</span>-arm32v7</span><br></pre></td></tr></table></figure><p>创建容器</p><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="language-bash"> --device=/dev/net/tun \</span></span><br><span class="line"><span class="language-bash">--name zerotier-one \</span></span><br><span class="line"><span class="language-bash">--net=host \</span></span><br><span class="line"><span class="language-bash">--restart=always \</span></span><br><span class="line"><span class="language-bash">--cap-add=NET_ADMIN \</span></span><br><span class="line"><span class="language-bash">--cap-add=SYS_ADMIN \</span></span><br><span class="line"><span class="language-bash">-v /var/lib/zerotier-one:/var/lib/zerotier-one \</span></span><br><span class="line"><span class="language-bash">-d bltavares/zerotier:1.10.3-arm32v7</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>加入zerotier网络</p><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">docker exec zerotier-one zerotier-cli join xxxxxxxxxxxxxxx</span><br></pre></td></tr></table></figure><p>显示 200 join ok 即添加成功。</p><p>安装青龙面板<br>1。拉取镜像</p><p>(青龙2.11.1后面的版本中某BUG影响到了32位arm，这里推荐旧版本2.10.13)</p><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">docker pull whyour/qinglong:<span class="number">2.10</span>.<span class="number">13</span></span><br></pre></td></tr></table></figure><p>2。创建容器</p><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="language-bash"> -tid --name qinglong -p 5700:5700 --restart always whyour/qinglong:2.10.13</span></span><br></pre></td></tr></table></figure><p>然后就可以通过  ip:5700 访问面板了<br>(如果打不开白屏就百度搜索  青龙面板白屏教程，简单的说就是网络问题 )<br>默认账号：admin 密码：admin</p><p>青龙面板入门必备技能设置</p><p>添加定时删除日志任务（青龙面板自的日志删除似乎不太管用，建议直接设置定时任务）</p><blockquote><p>ql rmlog 2</p></blockquote><blockquote><p>2 30 00  *</p></blockquote><p>网络上分享的个人仓库拉库命令（所有脚本均来自网络，且用且珍惜）</p><blockquote><p>ql repo <a href="https://github.com/wangbo777/mrdeer.git">https://github.com/wangbo777/mrdeer.git</a> </p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;刷机教程就不说了，网上太多了&lt;br&gt;（需要注意的是如果以前刷过别的第三方固件直接按住复位键插电就可以了）&lt;/p&gt;
&lt;p&gt;玩客云armbian固件下载地址：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;&quot;&gt;https://github.com/hzyitc/armbian-oneclou</summary>
      
    
    
    
    <category term="教程" scheme="https://langman.us.kg/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="docker" scheme="https://langman.us.kg/tags/docker/"/>
    
    <category term="linux" scheme="https://langman.us.kg/tags/linux/"/>
    
    <category term="casaos" scheme="https://langman.us.kg/tags/casaos/"/>
    
    <category term="qbittorrent" scheme="https://langman.us.kg/tags/qbittorrent/"/>
    
    <category term="zerotier" scheme="https://langman.us.kg/tags/zerotier/"/>
    
    <category term="青龙面板" scheme="https://langman.us.kg/tags/%E9%9D%92%E9%BE%99%E9%9D%A2%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>爱上感觉 这是一片测试Ai内容摘要的文章</title>
    <link href="https://langman.us.kg/html/testai/"/>
    <id>https://langman.us.kg/html/testai/</id>
    <published>2023-06-01T07:55:44.000Z</published>
    <updated>2024-10-10T13:56:35.175Z</updated>
    
    <content type="html"><![CDATA[<p>哈哈啊啊</p>]]></content>
    
    
    <summary type="html">测试ai内容摘要的文章。</summary>
    
    
    
    
    <category term="ai" scheme="https://langman.us.kg/tags/ai/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 安装配置</title>
    <link href="https://langman.us.kg/html/nginx/"/>
    <id>https://langman.us.kg/html/nginx/</id>
    <published>2020-09-30T01:16:03.000Z</published>
    <updated>2024-10-10T13:34:51.194Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Nginx-安装">Nginx 安装</h2><h3 id="系统平台：CentOS-release-6-6-Final-64位。">系统平台：CentOS release 6.6 (Final) 64位。</h3><h2 id="一、安装编译工具及库文件">一、安装编译工具及库文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install make zlib zlib-devel gcc-c++ libtool  openssl openssl-devel</span><br></pre></td></tr></table></figure><h2 id="二、首先要安装-PCRE">二、首先要安装 PCRE</h2><p>PCRE 作用是让 Nginx 支持 Rewrite 功能。</p><h3 id="1、下载-PCRE-安装包，">1、下载 PCRE 安装包，</h3><p>下载地址： <a href="http://downloads.sourceforge.net/project/pcre/pcre/8.35/pcre-8.35.tar.gz">http://downloads.sourceforge.net/project/pcre/pcre/8.35/pcre-8.35.tar.gz</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@abc src]# <span class="built_in">cd</span> /usr/local/src/</span><br><span class="line">[root@abc src]# wget http://downloads.sourceforge.net/project/pcre/pcre/8.35/pcre-8.35.tar.gz</span><br></pre></td></tr></table></figure><h3 id="2、解压安装包">2、解压安装包:</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@abc src]# tar zxvf pcre-8.35.tar.gz</span><br></pre></td></tr></table></figure><h3 id="3、进入安装包目录">3、进入安装包目录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@abc src]# <span class="built_in">cd</span> pcre-8.35</span><br></pre></td></tr></table></figure><h3 id="4、编译安装">4、编译安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@abc pcre-8.35]# ./configure</span><br><span class="line">[root@abc pcre-8.35]# make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h3 id="5、查看pcre版本">5、查看pcre版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@abc pcre-8.35]# pcre-config --version</span><br></pre></td></tr></table></figure><h2 id="安装-Nginx">安装 Nginx</h2><h3 id="1、下载-Nginx，下载地址：https-nginx-org-en-download-html">1、下载 Nginx，下载地址：<a href="https://nginx.org/en/download.html">https://nginx.org/en/download.html</a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@abc src]# <span class="built_in">cd</span> /usr/local/src/</span><br><span class="line">[root@abc src]# wget http://nginx.org/download/nginx-1.6.2.tar.gz</span><br></pre></td></tr></table></figure><h3 id="2、解压安装包-1">2、解压安装包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@abc src]# tar zxvf nginx-1.6.2.tar.gz</span><br></pre></td></tr></table></figure><h3 id="3、进入安装包目录-1">3、进入安装包目录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@abc src]# <span class="built_in">cd</span> nginx-1.6.2</span><br></pre></td></tr></table></figure><p>###4、编译安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@abc nginx-1.6.2]# ./configure --prefix=/usr/local/webserver/nginx --with-http_stub_status_module --with-http_ssl_module --with-pcre=/usr/local/src/pcre-8.35</span><br><span class="line">[root@abc nginx-1.6.2]# make</span><br><span class="line">[root@abc nginx-1.6.2]# make install</span><br></pre></td></tr></table></figure><h3 id="5、查看nginx版本">5、查看nginx版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@abc nginx-1.6.2]# /usr/local/webserver/nginx/sbin/nginx -v</span><br></pre></td></tr></table></figure><h2 id="到此，nginx安装完成。">到此，nginx安装完成。</h2><h2 id="Nginx-配置">Nginx 配置</h2><p>创建 Nginx 运行使用的用户 www：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@abc conf]# /usr/sbin/groupadd www </span><br><span class="line">[root@abc conf]# /usr/sbin/useradd -g www www</span><br></pre></td></tr></table></figure><p>配置nginx.conf ，将&#x2F;usr&#x2F;local&#x2F;webserver&#x2F;nginx&#x2F;conf&#x2F;nginx.conf替换为以下内容</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@abc conf]#  <span class="built_in">cat</span> /usr/local/webserver/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure><p>user www www;<br>worker_processes 2; #设置值和CPU核心数一致<br>error_log &#x2F;usr&#x2F;local&#x2F;webserver&#x2F;nginx&#x2F;logs&#x2F;nginx_error.log crit; #日志位置和日志级别<br>pid &#x2F;usr&#x2F;local&#x2F;webserver&#x2F;nginx&#x2F;nginx.pid;<br>#Specifies the value for maximum file descriptors that can be opened by this process.<br>worker_rlimit_nofile 65535;<br>events<br>{<br>  use epoll;<br>  worker_connections 65535;<br>}<br>http<br>{<br>  include mime.types;<br>  default_type application&#x2F;octet-stream;<br>  log_format main  ‘$remote_addr - $remote_user [$time_local] “$request” ‘<br>               ‘$status $body_bytes_sent “$http_referer” ‘<br>               ‘“$http_user_agent” $http_x_forwarded_for’;</p><p>#charset gb2312;</p><p>  server_names_hash_bucket_size 128;<br>  client_header_buffer_size 32k;<br>  large_client_header_buffers 4 32k;<br>  client_max_body_size 8m;</p><p>  sendfile on;<br>  tcp_nopush on;<br>  keepalive_timeout 60;<br>  tcp_nodelay on;<br>  fastcgi_connect_timeout 300;<br>  fastcgi_send_timeout 300;<br>  fastcgi_read_timeout 300;<br>  fastcgi_buffer_size 64k;<br>  fastcgi_buffers 4 64k;<br>  fastcgi_busy_buffers_size 128k;<br>  fastcgi_temp_file_write_size 128k;<br>  gzip on;<br>  gzip_min_length 1k;<br>  gzip_buffers 4 16k;<br>  gzip_http_version 1.0;<br>  gzip_comp_level 2;<br>  gzip_types text&#x2F;plain application&#x2F;x-javascript text&#x2F;css application&#x2F;xml;<br>  gzip_vary on;</p><p>  #limit_zone crawler $binary_remote_addr 10m;<br> #下面是server虚拟主机的配置<br> server<br>  {<br>    listen 80;#监听端口<br>    server_name localhost;#域名<br>    index index.html index.htm index.php;<br>    root &#x2F;usr&#x2F;local&#x2F;webserver&#x2F;nginx&#x2F;html;#站点目录<br>      location ~ .*.(php|php5)?$<br>    {<br>      #fastcgi_pass unix:&#x2F;tmp&#x2F;php-cgi.sock;<br>      fastcgi_pass 127.0.0.1:9000;<br>      fastcgi_index index.php;<br>      include fastcgi.conf;<br>    }<br>    location ~ .*.(gif|jpg|jpeg|png|bmp|swf|ico)$<br>    {<br>      expires 30d;</p><h1 id="access-log-off">access_log off;</h1><pre><code>&#125;location ~ .*\.(js|css)?$&#123;  expires 15d;</code></pre><h1 id="access-log-off-1">access_log off;</h1><pre><code>&#125;access_log off;</code></pre><p>  }</p><p>}</p><h2 id="检查配置文件nginx-conf的正确性命令：">检查配置文件nginx.conf的正确性命令：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@abc conf]# /usr/local/webserver/nginx/sbin/nginx -t</span><br></pre></td></tr></table></figure><h3 id="启动-Nginx">启动 Nginx</h3><p>Nginx 启动命令如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@abc conf]# /usr/local/webserver/nginx/sbin/nginx</span><br></pre></td></tr></table></figure><h3 id="访问站点">访问站点</h3><p>从浏览器访问我们配置的站点ip：</p><h3 id="Nginx-其他命令">Nginx 其他命令</h3><p>以下包含了 Nginx 常用的几个命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/local/webserver/nginx/sbin/nginx -s reload            <span class="comment"># 重新载入配置文件</span></span><br><span class="line">/usr/local/webserver/nginx/sbin/nginx -s reopen            <span class="comment"># 重启 Nginx</span></span><br><span class="line">/usr/local/webserver/nginx/sbin/nginx -s stop              <span class="comment"># 停止 Nginx</span></span><br></pre></td></tr></table></figure><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Nginx-安装&quot;&gt;Nginx 安装&lt;/h2&gt;&lt;h3 id=&quot;系统平台：CentOS-release-6-6-Final-64位。&quot;&gt;系统平台：CentOS release 6.6 (Final) 64位。&lt;/h3&gt;&lt;h2 id=&quot;一、安装编译工具及库文件&quot;&gt;一、</summary>
      
    
    
    
    <category term="linux" scheme="https://langman.us.kg/categories/linux/"/>
    
    <category term="centos" scheme="https://langman.us.kg/categories/linux/centos/"/>
    
    
    <category term="nginx" scheme="https://langman.us.kg/tags/nginx/"/>
    
    <category term="centos" scheme="https://langman.us.kg/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>Docker Hello World</title>
    <link href="https://langman.us.kg/html/docker-hello-world/"/>
    <id>https://langman.us.kg/html/docker-hello-world/</id>
    <published>2020-09-29T18:43:50.000Z</published>
    <updated>2024-10-10T13:33:14.594Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker-Hello-World">Docker Hello World</h2><p>Docker 允许你在容器内运行应用程序， 使用 docker run 命令来在容器内运行一个应用程序。</p><p>输出Hello world</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@root:~$ docker run ubuntu:15.10 /bin/echo <span class="string">&quot;Hello world&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Hello-world">Hello world</h3><p>各个参数解析：</p><p>docker: Docker 的二进制执行文件。</p><p>run: 与前面的 docker 组合来运行一个容器。</p><p>ubuntu:15.10 指定要运行的镜像，Docker 首先从本地主机上查找镜像是否存在，如果不存在，Docker 就会从镜像仓库 Docker Hub 下载公共镜像。</p><p>&#x2F;bin&#x2F;echo “Hello world”: 在启动的容器里执行的命令</p><p>以上命令完整的意思可以解释为：Docker 以 ubuntu15.10 镜像创建一个新容器，然后在容器里执行 bin&#x2F;echo “Hello world”，然后输出结果。</p><h3 id="运行交互式的容器">运行交互式的容器</h3><p>我们通过 docker 的两个参数 -i -t，让 docker 运行的容器实现”对话”的能力：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@root:~$ docker run -i -t ubuntu:15.10 /bin/bash</span><br></pre></td></tr></table></figure><p>root@0123ce188bd8:&#x2F;#<br>各个参数解析：</p><p>-t: 在新容器内指定一个伪终端或终端。</p><p>-i: 允许你对容器内的标准输入 (STDIN) 进行交互。</p><p>注意第二行 root@0123ce188bd8:&#x2F;#，此时我们已进入一个 ubuntu15.10 系统的容器</p><p>我们尝试在容器中运行命令 cat &#x2F;proc&#x2F;version和ls分别查看当前系统的版本信息和当前目录下的文件列表</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@0123ce188bd8:/#  <span class="built_in">cat</span> /proc/version</span><br></pre></td></tr></table></figure><p>Linux version 4.4.0-151-generic (buildd@lgw01-amd64-043) (gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.10) ) #178-Ubuntu SMP Tue Jun 11 08:30:22 UTC 2019</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@0123ce188bd8:/# <span class="built_in">ls</span></span><br></pre></td></tr></table></figure><p>bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@0123ce188bd8:/# </span><br></pre></td></tr></table></figure><p>我们可以通过运行 exit 命令或者使用 CTRL+D 来退出容器。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@0123ce188bd8:/#  <span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p>exit<br>root@root:<del>#<br>注意第三行中 root@root:</del># 表明我们已经退出了当前的容器，返回到当前的主机中。</p><h3 id="启动容器（后台模式）">启动容器（后台模式）</h3><p>使用以下命令创建一个以进程方式运行的容器</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@root:~$ docker run -d ubuntu:15.10 /bin/sh -c <span class="string">&quot;while true; do echo hello world; sleep 1; done&quot;</span></span><br></pre></td></tr></table></figure><p>2b1b7a428627c51ab8810d541d759f072b4fc75487eed05812646b8534a2fe63<br>在输出中，我们没有看到期望的 “hello world”，而是一串长字符</p><p>2b1b7a428627c51ab8810d541d759f072b4fc75487eed05812646b8534a2fe63</p><p>这个长字符串叫做容器 ID，对每个容器来说都是唯一的，我们可以通过容器 ID 来查看对应的容器发生了什么。</p><p>首先，我们需要确认容器有在运行，可以通过 docker ps 来查看：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@root:~$ docker ps</span><br></pre></td></tr></table></figure><p>CONTAINER ID        IMAGE                  COMMAND              …<br>5917eac21c36        ubuntu:15.10           “&#x2F;bin&#x2F;sh -c ‘while t…”    …</p><h3 id="输出详情介绍：">输出详情介绍：</h3><p>CONTAINER ID: 容器 ID。</p><p>IMAGE: 使用的镜像。</p><p>COMMAND: 启动容器时运行的命令。</p><p>CREATED: 容器的创建时间。</p><p>STATUS: 容器状态。</p><h2 id="状态有7种：">状态有7种：</h2><p>created（已创建）<br>restarting（重启中）<br>running 或 Up（运行中）<br>removing（迁移中）<br>paused（暂停）<br>exited（停止）<br>dead（死亡）<br>PORTS: 容器的端口信息和使用的连接类型（tcp\udp）。</p><p>NAMES: 自动分配的容器名称。</p><p>在宿主主机内使用 docker logs 命令，查看容器内的标准输出：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@root:~$ docker logs 2b1b7a428627</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@root:~$ docker logs amazing_cori</span><br></pre></td></tr></table></figure><p>停止容器</p><h3 id="我们使用-docker-stop-命令来停止容器">我们使用 docker stop 命令来停止容器:</h3><p>通过 docker ps 查看，容器已经停止工作:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@root:~$ docker ps</span><br></pre></td></tr></table></figure><p>可以看到容器已经不在了。</p><p>也可以用下面的命令来停止:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@root:~$ docker stop amazing_cori</span><br></pre></td></tr></table></figure><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Docker-Hello-World&quot;&gt;Docker Hello World&lt;/h2&gt;&lt;p&gt;Docker 允许你在容器内运行应用程序， 使用 docker run 命令来在容器内运行一个应用程序。&lt;/p&gt;
&lt;p&gt;输出Hello world&lt;/p&gt;
&lt;figure </summary>
      
    
    
    
    <category term="linux" scheme="https://langman.us.kg/categories/linux/"/>
    
    
    <category term="docker" scheme="https://langman.us.kg/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker 安装 MySQL</title>
    <link href="https://langman.us.kg/html/docker-to-mysql/"/>
    <id>https://langman.us.kg/html/docker-to-mysql/</id>
    <published>2020-09-29T18:33:44.000Z</published>
    <updated>2024-10-10T13:33:42.323Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker-安装-MySQL">Docker 安装 MySQL</h2><p>MySQL 是世界上最受欢迎的开源数据库。凭借其可靠性、易用性和性能，MySQL 已成为 Web 应用程序的数据库优先选择。</p><h3 id="1、查看可用的-MySQL-版本">1、查看可用的 MySQL 版本</h3><p>访问 MySQL 镜像库地址：<a href="https://hub.docker.com/_/mysql?tab=tags">https://hub.docker.com/_/mysql?tab=tags</a> 。</p><p>可以通过 Sort by 查看其他版本的 MySQL，默认是最新版本 mysql:latest 。</p><p>你也可以在下拉列表中找到其他你想要的版本：</p><h3 id="此外，我们还可以用-docker-search-mysql-命令来查看可用版本：">此外，我们还可以用 docker search mysql 命令来查看可用版本：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker search mysql</span><br></pre></td></tr></table></figure><p>NAME                     DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED<br>mysql                    MySQL is a widely used, open-source relati…   2529      [OK]<br>mysql&#x2F;mysql-server       Optimized MySQL Server Docker images. Crea…   161                  [OK]<br>centurylink&#x2F;mysql        Image containing mysql. Optimized to be li…   45                   [OK]<br>sameersbn&#x2F;mysql                                                          36                   [OK]<br>google&#x2F;mysql             MySQL server for Google Compute Engine          16                   [OK]<br>appcontainers&#x2F;mysql      Centos&#x2F;Debian Based Customizable MySQL Con…   8                    [OK]<br>marvambass&#x2F;mysql         MySQL Server based on Ubuntu 14.04              6                    [OK]<br>drupaldocker&#x2F;mysql       MySQL for Drupal                                2                    [OK]<br>azukiapp&#x2F;mysql           Docker image to run MySQL by Azuki - http:…   2                    [OK]<br>…</p><h3 id="2、拉取-MySQL-镜像">2、拉取 MySQL 镜像</h3><p>这里我们拉取官方的最新版本的镜像：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker pull mysql:latest</span><br></pre></td></tr></table></figure><h3 id="3、查看本地镜像">3、查看本地镜像</h3><p>使用以下命令来查看是否已安装了 mysql：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker images</span><br></pre></td></tr></table></figure><p>在上图中可以看到我们已经安装了最新版本（latest）的 mysql 镜像。</p><h3 id="4、运行容器">4、运行容器</h3><p>安装完成后，我们可以使用以下命令来运行 mysql 容器：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -itd --name mysql-test -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql</span><br></pre></td></tr></table></figure><p>参数说明：</p><p>-p 3306:3306 ：映射容器服务的 3306 端口到宿主机的 3306 端口，外部主机可以直接通过 宿主机ip:3306 访问到 MySQL 的服务。<br>MYSQL_ROOT_PASSWORD&#x3D;123456：设置 MySQL 服务 root 用户的密码。</p><h3 id="5、安装成功">5、安装成功</h3><p>通过 docker ps 命令查看是否安装成功：</p><h2 id="本机可以通过-root-和密码-123456-访问-MySQL-服务。">本机可以通过 root 和密码 123456 访问 MySQL 服务。</h2><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Docker-安装-MySQL&quot;&gt;Docker 安装 MySQL&lt;/h2&gt;&lt;p&gt;MySQL 是世界上最受欢迎的开源数据库。凭借其可靠性、易用性和性能，MySQL 已成为 Web 应用程序的数据库优先选择。&lt;/p&gt;
&lt;h3 id=&quot;1、查看可用的-MySQL-版本&quot;</summary>
      
    
    
    
    <category term="linux" scheme="https://langman.us.kg/categories/linux/"/>
    
    
    <category term="docker" scheme="https://langman.us.kg/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>你好世界</title>
    <link href="https://langman.us.kg/html/hello-world/"/>
    <id>https://langman.us.kg/html/hello-world/</id>
    <published>2011-09-30T01:16:03.000Z</published>
    <updated>2024-10-09T08:55:12.070Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="生活" scheme="https://langman.us.kg/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="linux" scheme="https://langman.us.kg/tags/linux/"/>
    
  </entry>
  
</feed>
